name: Update Stats

on:
  #push:
  #pull_request:
  workflow_dispatch:

jobs:
  update-stats:
    runs-on: windows-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      
    - name: Retrieve latest successful build number
      run: |
        $owner = "your-username"
        $repo = "your-repository"
        $token = $env:GITHUB_TOKEN

        # API request to get the latest successful workflow runs
        $uri = "https://api.github.com/repos/$owner/$repo/actions/runs?status=completed&conclusion=success&per_page=1"
        $headers = @{ Authorization = "token $token" }
        $response = Invoke-RestMethod -Uri $uri -Headers $headers
        $buildNumber = $response.workflow_runs[0].run_number

        # Output the build number
        echo "Latest successful build number: $buildNumber"
        echo "::set-output name=buildNumber::$buildNumber"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Update Latest Release, .NET, and NuGet Version in README
      run: |
        # Define the new version numbers
        $uri = "https://api.github.com/repos/PrimeEagle/${{ secrets.DOTNET_SOLUTION }}/actions/runs?status=completed&conclusion=success&per_page=1"
        $headers = @{ Authorization = "token ${{ secrets.BUILD_TOKEN }}" }
        $response = Invoke-RestMethod -Uri $uri -Headers $headers
        $buildNumber = $response.workflow_runs[0].run_number
        
        $NewReleaseVersion = "v2.0"  # Replace with your dynamic version variable for release
        $NewDotNetVersion = "${{ secrets.DOTNET_VERSION }}"    # Replace with your dynamic version variable for .NET
        $NewDotNetVersion = $NewDotNetVersion.Replace(".*", "")
        echo ".net ver = " + $NewDotNetVersion
        $NewNugetVersion = "v3.0"    # Replace with your dynamic version variable for NuGet

        # Patterns to identify the badge lines
        $ReleasePattern = '\!\[Static Badge\]\(https:\/\/img\.shields\.io\/badge\/Latest_Release-v[0-9]+(\.[0-9]+){0,2}-blue\)'
        $DotNetPattern = '\!\[Static Badge\]\(https:\/\/img\.shields\.io\/badge\/\.NET-[0-9]+(\.[0-9]+){0,2}-darkblue\)'
        $NugetPattern = '\!\[Static Badge\]\(https:\/\/img\.shields\.io\/badge\/NuGet_Package-v[0-9]+(\.[0-9]+){0,2}-blue\)'

        # New badge lines with updated versions
        $ReleaseReplacement = "![Static Badge](https://img.shields.io/badge/Latest_Release-$NewReleaseVersion-blue)"
        $DotNetReplacement = "![Static Badge](https://img.shields.io/badge/.NET-$NewDotNetVersion-darkblue)"
        $NugetReplacement = "![Static Badge](https://img.shields.io/badge/NuGet_Package-$NewNugetVersion-blue)"

        # Update the README.md
        $readmeContent = Get-Content README.md
        $readmeContent -replace $ReleasePattern, $ReleaseReplacement -replace $DotNetPattern, $DotNetReplacement -replace $NugetPattern, $NugetReplacement | Set-Content README.md

        # Check if there are changes and commit them
        if (git status --porcelain) {
          git config --global user.name 'PrimeEagle'
          git config --global user.email 'misc@hiddendragon.com'
          git add README.md
          git commit -m "Update version badges in README"
          git push
        }
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_TOKEN }}
      shell: pwsh
