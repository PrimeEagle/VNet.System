name: Update Stats

on:
  push:
      paths-ignore:
        - 'README.md'
        - '.github/workflows/*.yml'
  pull_request:
  workflow_run:
    workflows: ["Build .NET", "Build NuGet"]
    branches: [main]
    types: [completed]
  workflow_dispatch:

jobs:
  update-stats:
    runs-on: windows-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
              
    - name: Update Latest Release, .NET, and NuGet Version in README
      run: |
        $Owner = "${{ github.repository_owner }}"
        $Repo = "${{ github.repository }}"
        $Email = "${{ secrets.USER_EMAIL }}"
        
        # Get latest build number
        $uri = "https://api.github.com/repos/$Repo/actions/runs?status=completed&conclusion=success&per_page=1"
        $headers = @{ Authorization = "token ${{ secrets.BUILD_TOKEN }}" }
        $responseBuild = Invoke-RestMethod -Uri $uri -Headers $headers
        $buildNumber = $responseBuild.workflow_runs[0].run_number
        $versionJson = Get-Content 'version.json' | ConvertFrom-Json
        $version="$($versionJson.version)"
        $NewBuildVersion = "$version.$buildNumber"
        echo "build number = $buildNumber"
        echo "new build version = $NewBuildVersion"
        
         # API request to get the latest release version number
        $uri = "https://api.github.com/repos/$Repo/releases/latest"
        $responseRelease = Invoke-RestMethod -Uri $uri -Headers $headers
        $NewReleaseVersion = $responseRelease.tag_name
        echo "new release = $NewReleaseVersion"
        
        $NewDotNetVersion = "${{ secrets.DOTNET_VERSION }}"
        $NewDotNetVersion = $NewDotNetVersion.Replace(".*", "")
        echo ".NET version = $NewDotNetVersion"

        # Create a temporary NuGet.Config file with GitHub Packages source and credentials
        $NugetConfigPath = "$Env:RUNNER_TEMP/NuGet.Config"
        $EncodedToken = [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("username:${{ secrets.BUILD_TOKEN }}"))
        @"
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <add key="github" value="https://nuget.pkg.github.com/$Owner/index.json" />
            </packageSources>
            <packageSourceCredentials>
              <github>
                <add key="Username" value="username" />
                <add key="ClearTextPassword" value="${{ secrets.BUILD_TOKEN }}" />
              </github>
            </packageSourceCredentials>
          </configuration>
        "@ | Set-Content -Path $NugetConfigPath

        # Set the NuGet.Config to use
        $Env:NUGET_CONFIG = $NugetConfigPath
        echo "list "
        nuget list -Source "github"

        # Patterns to identify the badge lines
        $BuildPattern = "!\[Static Badge\]\(https://img\.shields\.io/badge/Latest_Build-v[0-9]+(\.[0-9]+){0,3}-lightblue\)"
        $ReleasePattern = "!\[Static Badge\]\(https://img\.shields\.io/badge/Latest_Release-v[0-9]+(\.[0-9]+){0,2}-blue\)"
        $DotNetPattern = "!\[Static Badge\]\(https://img\.shields\.io/badge/\.NET-[0-9]+(\.[0-9]+){0,2}-darkblue\)"
        $NugetPattern = "!\[Static Badge\]\(https://img\.shields\.io/badge/NuGet_Package-v[0-9]+(\.[0-9]+){0,2}-blue\)"

        # New badge lines with updated versions
        $BuildReplacement = "![Static Badge](https://img.shields.io/badge/Latest_Build-v$NewBuildVersion-lightblue)"
        $ReleaseReplacement = "![Static Badge](https://img.shields.io/badge/Latest_Release-v$NewReleaseVersion-blue)"
        $DotNetReplacement = "![Static Badge](https://img.shields.io/badge/.NET-$NewDotNetVersion-darkblue)"
        $NugetReplacement = "![Static Badge](https://img.shields.io/badge/NuGet_Package-v$NewNugetVersion-blue)"
        
        # Update the README.md
        $readmeContent = Get-Content README.md
        $readmeContent -replace $ReleasePattern, $ReleaseReplacement -replace $DotNetPattern, $DotNetReplacement -replace $NugetPattern, $NugetReplacement -replace $BuildPattern, $BuildReplacement | Set-Content README.md

        # Check if there are changes and commit them
        if (git status --porcelain) {
          git config --global user.name "$Owner"
          git config --global user.email "$Email"
          git add README.md
          git commit -m "Update version badges in README"
          git push
        }
      env:
        GITHUB_TOKEN: ${{ secrets.BUILD_TOKEN }}
      shell: pwsh
